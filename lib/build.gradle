/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // for zql
    mavenLocal()
}

version = '0.1.0'

configurations {
	runtimeLibraries
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'
    
    // https://mvnrepository.com/artifact/org.json/json
	implementation 'org.json:json:20211205'
	
	// sql parsing
	implementation files('libs/zql-parser-1.0.jar')
	implementation files('libs/zql-sample-1.0.jar')
	
	// sparql parsing
	implementation 'org.apache.jena:apache-jena-libs:4.3.2'
	
	// turn off logs
	implementation 'org.slf4j:slf4j-nop:1.7.25'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named('jar') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
    
    excludes = ['it/uniroma1/diag/examples']
    from sourceSets.main.output
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

apply plugin: 'application'

mainClassName = 'it.uniroma1.diag.examples.Main'
